<#
 #
 # Copyright (C) 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 \file admin_sse.ecpp
 \author nicolas DAVIET <nicolasdaviet@Eaton.com>
 \brief Open an sse connection to send any notification to UI
*/
#><%pre>
#include <fty_proto.h>
#include <tnt/tntnet.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_db_dbpath.h>
#include <fty_common_db_asset.h>
#include "web/src/sse.h"
#include "shared/utils.h"
#include "shared/utilspp.h"
#include "db/assets.h"
#include "cleanup.h"

</%pre>
<%request scope="global">
UserInfo user;
std::string gaccess_token;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        http_die ("internal-error", "Database is not ready yet, please try again after a while.");
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    // sanity checks
    std::string dc = qparam.param("datacenter");
    log_debug ("Request parameters - Initial tainted values received: datacenter = '%s'\n",
            dc.c_str ());

    if (!dc.empty ())
    {
        if (!is_ok_name (dc.c_str ()))
        {
            http_die ("request-param-bad", dc.c_str ());
        }
    } else {
        http_die ("request-param-required", "datacenter");
    }


    int64_t dbid =  DBAssets::name_to_asset_id (dc);
    if (dbid == -1) {
            http_die ("element-not-found", dc.c_str ());
    }
    if (dbid == -2) {
            http_die ("internal-error", "Connecting to database failed.");
    }
    log_debug ("datacenter id = '%" PRIu32 "'.", (uint32_t) dbid);

    Sse sseManager;
    sseManager.setDatacenter(dc);
    sseManager.setDatacenterId((uint32_t) dbid);

    try {
        sseManager.setConnection(tntdb::connectCached (DBConn::url));
    }
    catch (const tntdb::Error& e) {
        log_error ("tntdb::connectCached (url = '%s') failed: %s.", DBConn::url.c_str (), e.what ());
        http_die ("internal-error", "Connecting to database failed.");
    }
    catch (const std::exception& e) {
        log_error ("Exception caught: '%s'.", e.what ());
        http_die ("internal-error", e.what ());
    }

    //Get asset from the datacenter
    const char * errorMsgAsset = sseManager.loadAssetFromDatacenter();
    if (errorMsgAsset) {
        http_die ("internal-error", errorMsgAsset);
    }

    // connect to malamute and streams
    const char * errorMsgMlm  = sseManager.connectMalamute();
    if (errorMsgMlm) {
        http_die ("internal-error", errorMsgMlm);
    }
    //Stream Alert
    if (-1 == sseManager.consumeStream("ALERTS", ".*")) {
        http_die ("internal-error", "Cannot consume ALERT stream");
    }

    //Stream Asset
    if (-1 == sseManager.consumeStream("ASSETS", ".*")) {
        http_die ("internal-error", "Cannot consume ASSETS stream");
    }

    // Sse specification :  https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events
    reply.setContentType("text/event-stream");
    reply.setDirectMode();
    reply.out().flush();

    int64_t start = zclock_mono();
    int64_t sendNextExpTime = 0;
    int64_t diff = 0;
    int64_t now = 0;

    //get the token from the request
    std::string access_token = gaccess_token;

    if (access_token.empty()){
      log_error("Token empty");
      http_die ("internal-error", "Cannot get token value");
    }

    sseManager.setToken(access_token);
    long int tme;
    unsigned tntRequestTimeout = tnt::TntConfig::it().maxRequestTime * 1000 / 2 ;

    // Every ( connection request time out / 2) minutes we close the connection to avoid a connection timeout which would kill tntnet.
    // The client will reconnect itself.
    std::string json;
    while (diff < tntRequestTimeout) {

        //Check if a request shutdown was initiated
        if (tnt::Tntnet::shouldStop())
        {
            log_info("Initialization shutdown request for tntnet: Sse stop");
            break;
        }

        now = zclock_mono();
        diff = now - start;

        //check if token is still valid
        //If valid return the time before the session expiration
        tme = sseManager.checkTokenValidity();
        if (-1 == tme)
        {
            log_info ("sse : Token revoked or expired");
            break;
        }

        // Each minute, send the time before expiration
        if (now - sendNextExpTime > 60000) {
            // send the time before the token is expired
            json = "data:{\"topic\":\"session\",\"payload\":{\"exptime\":" ;
            json +=  std::to_string(tme).c_str();
            json +=  "}}\n\n";
            reply.out()<<json;
            if (reply.out().flush().fail())
            {
                log_debug ("Error during flush");
                break;
            }
            sendNextExpTime = now;
        }

        // wait for the right message or time-out
        zmsg_t *recv_msg = NULL;

        zsock_t *which = (zsock_t *) zpoller_wait (sseManager.getPoller(), 10000);
        if (which == sseManager.getPipe()) {
            recv_msg = sseManager.getMessageFromMlm();
        }
        if (!recv_msg ){
            if (zpoller_expired (sseManager.getPoller())) {
                //Send heartbeat message
                json = "data:{\"topic\":\"heartbeat\",\"payload\":{}}\n\n";

                reply.out()<<json;
                if (reply.out().flush().fail())
                {
                    log_debug ("Error during flush");
                    break;
                }
                continue;
            }

            if (zpoller_terminated(sseManager.getPoller())){
                log_error ("zpoller_wait(timeout = 10000) terminated.");
                break;
            }
        }

        // Got it
        //Check if the message comes from stream
        if (sseManager.isMessageComesFrom("STREAM DELIVER")) {
            fty_proto_t *msgProto = fty_proto_decode (&recv_msg);
            if (!msgProto) {
                log_error ("Can't decode fty_proto from stream");
                zmsg_destroy (&recv_msg);
                continue;
            }

            if (fty_proto_id (msgProto) == FTY_PROTO_ALERT) {
                log_debug ("message id is  FTY_PROTO_ALERT");
                json = sseManager.changeFtyProtoAlert2Json(msgProto);
            } else if (fty_proto_id (msgProto) == FTY_PROTO_ASSET) {
                log_debug ("message id is  FTY_PROTO_ASSET");
                json = sseManager.changeFtyProtoAsset2Json(msgProto);
            } else {
                log_debug ("message id %d is not implemented for sse",fty_proto_id (msgProto));
                continue;
            }

            fty_proto_destroy (&msgProto);
            zmsg_destroy (&recv_msg);

            if (!json.empty()){
                reply.out()<<json;
                if (reply.out().flush().fail())
                {
                    log_debug ("Error during flush");
                    break;
                }
            }
        } else if (sseManager.isMessageComesFrom("MAILBOX DELIVER")) {
            //not implemented yet
            zmsg_destroy (&recv_msg);
        }
    }

</%cpp>
